image(haul.temp)
points(depth10)
image(haul.temp)
points(depth10)
a <- image(haul.temp)
a
image(haul.temp)
points(seq(0,1,length.out = length(depth10)), depth10/max(depth))
image(haul.temp)
points(seq(0,1,length.out = length(depth10)), depth10/max(depth), pch=16, col=colo)
apply(is.na(ICESGColor2016[[1]]),2,sum)
apply(is.na(ICESGColor2016[[1]]),2,sum)
dim(hauls_hab)
hauls_hab <- over(hauls, habitats)
20*75
citation("vegan").
citation("vegan")
library("Momocs", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
require*FD
require(FD)
cite(FD)
cite("FD")
cite("FD")
45Ã‡12
45*12
540/4
460/14
460/13
73,99+74,54
73.99+74.54
93+90+91+271+297
13*16
8*75
20*1500
install.packages("bibliometrix")
87+8
93+90+91+271+297
85+74+75
4182+4179
4462+4143
180+112.50
28.57+78.45
476.2+292.5+107.02+419.89
4000*4500
149*5
290*1.15
745*1.185
1000+900+333.42 + 250
1+44+37+1+1+1+22+63
2+21+10+1+14
379.82+40+21+17+19+12.9+10
install.packages("lavaan")
require(lavaan)
?HolzingerSwineford1939
HolzingerSwineford1939
speed   =~ x7 + x8 + x9 '
HS.model <- ' visual  =~ x1 + x2 + x3
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
summary(fit, fit.measures=TRUE)
plot(fit)
install.packages("semPlot")
X <- rnorm(100)
Y <- rnorm(100)
Z <- rnorm(1) * X + rnorm(1) * Y + rnorm(1) * X * Y
DF <- data.frame(X, Y, Z)
res <- lm(Z ~ X * Y, data = DF)
semPaths(res)
require(semPlot)
14*14
13*13
0.2*2674
2120/2674
2674-534
library("Momocs", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("geomorph", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
methods(class=Ldk)
290/5
200 /5
tab1 <- sample(letters, 20)
tab2 <- sample(letters, 30)
tab1 <- sample(letters, 20)
tab2 <- sample(letters, 15)
tab1
tab1 <- sample(letters, 20)
tab2 <- sample(letters, 15)
tab1
tab2
tab1%in%tab2
tab2%in%tab1
tab1[tab1%in%tab2]
tab3 <- tab1[tab1%in%tab2]
match(tab3, tab2)
tab1 <- data.frame("ID"=sample(letters, 20), "x"=rnorm(20), "y"=rnorm(20))
tab2 <- data.frame("ID"=sample(letters, 15), "z"=rnorm(15))
tab1 <- data.frame("ID"=sample(letters, 20), "x"=rnorm(20), "y"=rnorm(20))
tab2 <- data.frame("ID"=sample(letters, 15), "z"=rnorm(15))
tab1
tab2
ID <- tab1$ID[tab1$ID%in%tab2$ID]
ID
tab1[match(tab1$ID, ID)]
tab1[match(tab1$ID, ID),]
tab1[match(ID,tab1$ID,),]
tab1b <- tab1[match(ID,tab1$ID),]
tab2b <- tab2[match(ID,tab2$ID),]
tab3 <- cbind(tab1b, tab2b)
tab3
1676-24
1696-24
846-29
524-25
Figure 1: Tensor decomposition is a promising method to (A) analyze 3D community dataset and (B) reveal spatio-temporal sub-communities (modified from Frelat et al. 2017)
1708-24
840-30
842-30
11*12
123*600
123*430
load("data_all.RData")
?clean.wctri
require(trawlData)
data("clean.ai")
data("clean.ai")
data("clean.ebs")
data("clean.gmex")
data("clean.goa")
data("clean.neus")
dim(clean.neus)
data("clean.sa")
data("clean.shelf")
data("clean.wcann")
data("clean.wctri")
names(clean.neus)
cooNames <- c("lon", "lat")
table(duplicated(clean.ai[,cooNames]))
dim(clean.ai[,cooNames])
data(package="trawlData")
co <- clean.ai[,cooNames, by=cooNames]
dim(co)
co
cooNames <- list("lon", "lat")
co <- clean.ai[,cooNames, by=cooNames]
setkeyv(clean.ai, c('lon','lat'))
co <-subset(unique(smalldat), select = c("lon", "lat")
cooNames <- list("lon", "lat")
co <- clean.ai[,cooNames, by=cooNames]
dim(co)
t
map("world", xlim=c(-190, -45), ylim=c(25, 65),
fill = TRUE, col="grey90")
#points(mapDat$lon, mapDat$lat, col=rainbow(10)[as.factor(mapDat$reg)])
table(mapDat$reg, mapDat$yrs_sampled)
cols <- colscale(sqrt(mapDat$avgRich), col = terrain.colors(10))
points(mapDat$lon, mapDat$lat, col=cols$col)
#Data.table not a Data.frame
cooNames <- c("lon", "lat")
dim(clean.ai[,cooNames])
names(clean.neus)
data(clean.ai)
data(clean.ai)
data(clean.ai)
# install.packages("tidyverse")
# library(tidyverse)
load("data_all.RData")
dim(data_all) # 785955 rows
length(unique(data_all$spp)) #713 species
length(unique(data_all$haulid)) # 50252 hauls
coo <- data_all %>%
group_by(haulid) %>%
summarize(x=median(lon), y=median(lat), z=median(year),
s=season[1], d=reg[1])
#Spatial
library(mapdata)
map("world", xlim=c(-190, -45), ylim=c(25, 65),
fill = TRUE, col="grey90")
points(coo$x, coo$y, col=rainbow(10)[as.factor(coo$d)])
sur <- coo %>% group_by(d) %>% summarise(x1=mean(x), y1=mean(y))
text(sur$x1, sur$y1, labels = sur$d)
# Select per season
regsea <- table(data_all$reg,data_all$season)
maxsea <- colnames(regsea)[apply(regsea, 1, which.max)]
data_all$reg <- as.factor(data_all$reg)
data_sea <- c()
for (i in 1:nlevels(data_all$reg)){
data_t <- data_all %>% filter(season == maxsea[i] & reg == levels(reg)[i])
data_sea <- rbind(data_sea, data_t)
}
dim(data_sea)
length(unique(data_sea$haulid))
coo <- data_sea %>%
group_by(haulid) %>%
summarize(x=median(lon), y=median(lat), z=median(year),
s=season[1], d=reg[1])
myHeatmap(table(coo$d, coo$z), breaks = c(0,1,50, 100, 250, 500),
pal = c("white", "grey", "green", "blue", "red"), colscale = FALSE)
png("trawlDiv_ori.png")
par(mfrow=c(2,1), mar=c(0,0,0,0))
map("world", xlim=c(-190, -45), ylim=c(25, 65),
fill = TRUE, col="grey90")
points(coo$x, coo$y, col=rainbow(10)[as.factor(coo$d)])
sur <- coo %>% group_by(d) %>% summarise(x1=mean(x), y1=mean(y))
text(sur$x1, sur$y1, labels = sur$d)
myHeatmap(table(coo$d, coo$z), breaks = c(0,1,50, 100, 250, 500),
pal = c("white", "grey", "green", "blue", "red"), colscale = FALSE)
dev.off()
keep <- c("ebs", "gmex", "neus", "sa", "shelf" )
data_kee <- data_sea %>% filter(reg %in% keep)
coo <- data_kee %>%
group_by(haulid) %>%
summarize(x=median(lon), y=median(lat), z=median(year),
s=season[1], d=reg[1])
map("world", xlim=c(-190, -45), ylim=c(25, 65),
fill = TRUE, col="grey90")
points(coo$x, coo$y, col=rainbow(10)[as.factor(coo$d)])
sur <- coo %>% group_by(d) %>% summarise(x1=mean(x), y1=mean(y))
text(sur$x1, sur$y1, labels = sur$d)
myHeatmap(table(coo$d, coo$z), breaks = c(0,1,50, 100, 250, 500),
pal = c("white", "grey", "green", "blue", "red"), colscale = FALSE)
co <-subset(unique(smalldat), select = c("lon", "lat"))
co <-subset(unique(clean.ai), select = c("lon", "lat"))
dim(co)
dim(clean.ai)
co <-subset(unique(clean.ai), select = c("lon", "lat"), by=c('lon','lat'))
dim(clean.ai)
dim(co)
co <-subset(clean.ai, select = c("lon", "lat"), by=c('lon','lat'))
dim(co)
co <-subset(clean.ai, select = c("lon", "lat"), by=c('lon','lat'))
dim(co)
co <-clean.ai[,select = c("lon", "lat"), by=c('lon','lat')]
co <-clean.ai[,c("lon", "lat"), by=c('lon','lat')]
dim(co)
head(co)
co <-clean.ai[,c("lon", "lat"),]
dim(co)
co <-rbind(clean.ai[,c("lon", "lat"),],
clean.ebs[,c("lon", "lat"),],
clean.gmex[,c("lon", "lat"),])
dim(co)
co <-rbind(clean.ai[,c("lon", "lat"),by=c('lon','lat')],
clean.ebs[,c("lon", "lat"),by=c('lon','lat')],
clean.gmex[,c("lon", "lat"),by=c('lon','lat')],
clean.goa[,c("lon", "lat"),by=c('lon','lat')],
clean.neus[,c("lon", "lat"),by=c('lon','lat')],
clean.shelf[,c("lon", "lat"),by=c('lon','lat')],
clean.wcann[,c("lon", "lat"),by=c('lon','lat')],
clean.wctri[,c("lon", "lat"),by=c('lon','lat')])
dim(co)
head(co)
lonlat <- paste0(co$lon, co$lat, sep=":")
lonlat <- unique(lonlat)
length(lonlat)
tmp <- strsplit(lonlat, split = ":")
lon <- lapply(tmp, funciton(dat){dat[1]})
lon <- lapply(tmp, function(dat){dat[1]})
lat <- lapply(tmp, function(dat){dat[2]})
lon <- unlist(lapply(tmp, function(dat){dat[1]}))
lat <- unlist(lapply(tmp, function(dat){dat[2]}))
range(lon)
range(lat)
require(FishData)
lon <- as.numeric(unlist(lapply(tmp, function(dat){dat[1]})))
lat <- as.numeric(unlist(lapply(tmp, function(dat){dat[2]})))
range(lon, na.rm=TRUE)
coo <- c()
coo$lon <- as.numeric(unlist(lapply(tmp, function(dat){dat[1]})))
coo$lat <- as.numeric(unlist(lapply(tmp, function(dat){dat[2]})))
coo <- coo[!is.na(lon),]
12*4
0.2*48
0.05*48
12*13
12*1312*14
12*14
12*15
12*12
0.7*88
240/290
240/540
325*2+300+125
library("vegan", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
357.76+349.5
260/4
907.29+275.55
install.packages("Automorph")
218/8
14*4
235/290
181-52
0.5*520+0.06*1290*9*10
0.5*520+0.06*1290+9*10
45*120
30*120
30*120
500*0.20
500*0.15
15*15
?loess
9.99+29.99+2
shiny::runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
shiny::runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
if (length(multimvar)>1){
for (i in 2:length(multimvar)){
if(!is.null(multimvar[[i]]$co)){
cor1i <- cor.test(multimvar[[1]]$co[,pc], multimvar[[i]]$co[,pc])
leg <- c(leg, paste0(names(multimvar)[i], ": ", round(cor1i$estimate,2), symnum(cor1i$p.value, alpha, stars)))
corbio <- c(corbio, cor1i$estimate, cor1i$p.value)
}
}
}
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.2')
runApp('Documents/Hamburg/IEA - Christian/Scripts/Shiny_0.3')
907.25*1.13
907.25+275.55
(907.25+275.55)*1.13
(907.29+275.55)*1.13
(907.29+275.55)
16.2*1.13
108+41.98
1336.6+34.69+18.3+149.98
require(ade4)
dudi.acm()
?dudi.acm
907.29+275.55
108+ 41.98
907.29+275.55+16.20
108+ 41.98 + 34.69
16.20*2+5
88.5+37.4+450
4650*12*2
94+132
600/30
1000/30
800*0.24
700*0.15
2750*12/14
750*12/14
700*12/14
install.packages("seewave")
require(seewave)
f <- 22050
F1 <- synth(f=f, am=c(50,10), cf=2000, d=1, fm=c(500,5,0), plot=FALSE)
F2 <- synth(f=f, a=0.8, cf=4000, am=c(50,10), d=1, fm=c(500,5,0), plot=FALSE)
F3 <- synth(f=f, a=0.6, cf=6000, am=c(50,10), d=1, fm=c(500,5,2000), plot=FALSE)
F4 <- synth(f=f, a=0.4, cf=8000, am=c(50,10), d=1, fm=c(500,5,2000), plot=FALSE)
f <- 22050
F1 <- synth(f=f, am=c(50,10), cf=2000, d=1, fm=c(500,5,0), plot=FALSE)
data(tico)
env.tico <- env(tico, f=22050, plot=FALSE)
ifreq.tico <- ifreq(tico, f=22050, plot=FALSE)$f[,2]
synth2(env=env.tico, ifreq=ifreq.tico*1000+3000, f=22050, plot=TRUE)
synth2(env=env.tico, ifreq=ifreq.tico*1000+3000, f=22050, plot=TRUE)
synth2(env=env.tico, ifreq=ifreq.tico*1000+3000, f=22050, plot=TRUE)
F1 <- synth2(f=f, am=c(50,10), cf=2000, d=1, fm=c(500,5,0), plot=FALSE)
demo(seewave)
data(tico)
listen(tico,f=22050)
setWavPlayer('/usr/bin/afplay')
require(tuneR)
setWavPlayer('/usr/bin/afplay')
play(tico)
listen(tico,f=22050)
35'4'
35*4
shiny::runApp('Documents/Hamburg/IEA - Christian/Scripts/comita/inst/shiny-example/comita')
library(comita)
setwd("~/Documents/Hamburg/IEA - Christian/Scripts")
devtools::build("comita")
install.packages("~/Documents/Hamburg/IEA - Christian/Scripts/comita_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(comita)
runApp('comita/inst/shiny-example/comita')
runApp('comita/inst/shiny-example/comita')
setwd("~/Documents/Hamburg/IEA - Christian/Scripts/comita")
document()
devtools::document()
library(devtools)
library(roxygen2)
document()
detach("package:comita", unload=TRUE)
document()
runApp('inst/shiny-example/comita')
tab <- read.csv("baltic_gb.txt", sep="\t", row.names = 1)
setwd("~/Documents/Hamburg/IEA - Christian/Scripts/comita/inst/shiny-example/comita")
tab <- read.csv("baltic_gb.txt", sep="\t", row.names = 1)
lab <- short(names(tab))#substr(names(tab), 0, 7)
yr <- row.names(tab) #years
tab <- as.matrix(tab)
mvar <- ita(tab, npc = input$npc, met = input$met,
sca = TRUE, logt = input$log)
mvar <- ita(tab, npc = 2, met =1,
sca = TRUE, logt = FALSE)
mvar <- negPC(mvar)
layout(matrix(1:4, ncol=2), width = c(1.5,1))
pal <- list("1"=c("springgreen4","chartreuse3","yellow","darkgoldenrod1", "red"),
"2"=c("#a6611a", "#dfc27d", "#f5f5f5", "#80cdc1", "#018571"),
"3"=c("#d7191c", "#fdae61", "#ffffbf", "#abd9e9", "#2c7bb6"))
col <- unlist(pal[1])
par(mar=c(2,4,0,0.1))
plot.heatmap(mvar, col, shortname=lab)
plot.timeseries(mvar)
barx <- plot.eig(mvar)
randeig <- ita.nrand(tab, nrep = 2, met = 1, sca = TRUE,
log = FALSE, ar = FALSE, tr = FALSE, npc = 2)
lines(barx$barx, apply(randeig,2,q95), col="red",
type="b", pch=18, xpd=NA)
signif <- barx$perc>apply(randeig,2,q95)
star <- ifelse(signif, "*", "")
text(x= barx$barx, y= barx$perc + 1, star, xpd=NA, col="red")
runApp()
setwd("~/Documents/Hamburg/IEA - Christian/Scripts/comita")
document()
runApp('inst/shiny-example/comita')
#' @param dat matrix with
runApp('inst/shiny-example/comita')
leg1 <- plot.compts(tab, mvar, col, showleg = FALSE, pc=npc2)
leg1 <- plot.compts(tab, mvar, col, showleg = FALSE, pc=1)
mvar <- multita(tab, npc = 2, met = c(1,5,6),
sca = TRUE, logt = FALSE, detrend = FALSE)
tab
mvar <- multita(tab, npc = 2, met = c(1,5,6),
sca = TRUE, logt = FALSE, detrend = FALSE)
mvar <- multita(tab, npc = 2, met = c(1,4,7,9),
sca = TRUE, logt = FALSE, detrend = FALSE)
col <- c("black", rainbow(9)[met[-1]])#
met
met <- c(1,4,7,9)
met[-1]
met <- c(2,4,7,9)
met[-1]
col <- c("black", rainbow(9)[met[-1]])#
leg1 <- plot.compts(tab, mvar, col, showleg = FALSE, pc=npc2)
leg1 <- plot.compts(tab, mvar, col, showleg = FALSE, pc=1)
plot.new()
legend("center", legend = leg1, lty = 1, col=col, xpd=NA, bty="n")
leg1
leg2 <- plot.compvar(tab, mvar, col, showleg = FALSE, shortname = lab, pc=npc2)
leg2 <- plot.compvar(tab, mvar, col, showleg = FALSE, shortname = lab, pc=1)
plot.new()
legend("center", legend = leg2$leg, pch = 16, col=leg2$col, xpd=NA, bty="n")
lab
leg2$col
lab <- shortname
odPC <- order(multimvar[[1]]$co[,pc])
multimvar <- mvar
dotchart(as.numeric(scale(multimvar[[1]]$co[odPC,pc])),
labels = lab[odPC], pch=16, xlim=c(-2.2, 2.2),
xlab=paste0("PC",pc))
dotchart(as.numeric(scale(multimvar[[1]]$co[odPC,1])),
labels = lab[odPC], pch=16, xlim=c(-2.2, 2.2),
xlab=paste0("PC",1))
odPC <- order(multimvar[[1]]$co[,pc])
odPC <- order(multimvar[[1]]$co[,1])
dotchart(as.numeric(scale(multimvar[[1]]$co[odPC,1])),
labels = lab[odPC], pch=16, xlim=c(-2.2, 2.2),
xlab=paste0("PC",1))
for (i in 2:length(multimvar)){
if(!is.null(multimvar[[i]]$co)){
points(scale(multimvar[[i]]$co[odPC,pc]), 1:nrow(multimvar[[i]]$co), pch=16, col=col[i])
}
}
pc=1
for (i in 2:length(multimvar)){
if(!is.null(multimvar[[i]]$co)){
points(scale(multimvar[[i]]$co[odPC,pc]), 1:nrow(multimvar[[i]]$co), pch=16, col=col[i])
}
}
leg <- c(names(multimvar)[1])
alpha <- c(0, 0.001, 0.01, 0.05, 0.1, 1)
stars <- c("***", "**", "*", ".", " ")
corbio <- c()
coleg <-  col[1]
for (i in 1:length(multimvar)){
if(!is.null(multimvar[[i]]$co)){
points(scale(multimvar[[i]]$co[odPC,pc]), 1:nrow(multimvar[[i]]$co), pch=16, col=col[i])
}
}
dotchart(as.numeric(scale(multimvar[[1]]$co[odPC,pc])),
labels = lab[odPC], pch=16, xlim=c(-2.2, 2.2),
xlab=paste0("PC",pc))
for (i in 1:length(multimvar)){
if(!is.null(multimvar[[i]]$co)){
points(scale(multimvar[[i]]$co[odPC,pc]), 1:nrow(multimvar[[i]]$co), pch=16, col=col[i])
}
}
leg <- c(names(multimvar)[1])
alpha <- c(0, 0.001, 0.01, 0.05, 0.1, 1)
stars <- c("***", "**", "*", ".", " ")
corbio <- c()
coleg <-  col[1]
length(multimvar)>1
i=2
cor1i <- cor.test(multimvar[[1]]$co[,pc], multimvar[[i]]$co[,pc])
leg <- c(leg, paste0(names(multimvar)[i], ": ", round(cor1i$estimate,2), symnum(cor1i$p.value, alpha, stars)))
leg
names(multimvar)[i]
multimvar
coleg <-  c(coleg, col[i])
col[i]
document()
document()
runApp('inst/shiny-example/comita')
runApp('~/Documents/Hamburg/IEA - Christian/Scripts/2018May/OtherShiny.R')
